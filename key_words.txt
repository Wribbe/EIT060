#use EIT060_words.txt

UMTS, extent of nonrepudation
buffer overflow, unsafe functions, return address, buffer size
spoofing attack, prevention, detection
WEP, confidentiality, integrity, authentication
UID, real, effective, Linux
policy conflict, groups, Linux vs Windows
difference, Bell-LaPalda, Biba
ESP-package, encryption, ip-header, tunnel mode, transport mode
firewall, packet filter, stateful packet filter
orange book vs Common criteria, product functionality, product assurance
SSL, 3x2 keys, Client, Server, CA
Needham-Schroeder, security flaw
Kerberos
cryptographic strength, empirically secure, provably secure, unconditionally secure
Birtday paradox
Messenger Authentication Code (MAC)
FFR (biometric systems)
inference (statistics database)
Chinese wall security model.

diff, access control list, capabilities
drwxrwxrwt vs drwxrwxrwx
Orange Book vs ITSEC vs Common Criteria: functionality, assurance -> products
replay attack, protection in SSL handshake
Encrypt Key Exchange (EKE), omit password, modified EKE
ESP header, ?not encrypted in IPsec transport mode
IDS (Intrusion Detection System), missuse detection, anomaly detection
IDS (Intrusion Detection System) vs honeypot: false negatives, false positives
Biba -> !x(clean, dirty)
RSA, public modulus, public exponent, break-find private exponent
Diffie-Hellman, !desc(), !desc(man in the middle), !desc(stop Diffie-Hellman man in the middle)
!diff(/etc/passwd, /etc/shadow)
!diff(LM, NTLM)hashes.
!diff(Linux vs Windows) -> salt use
!expl(random salt) -> protection time-memory attack
!defi(both entries, channel, authenticated)
!expl(network authenticated) -> UMTS
!expl(server authentication, SSL) -> RSA as handshake
!expl(Controlled Invocation)
!expl(HMAC)
!expl(Chinese Wall Model)
!expl(Spoofing Attack)
!expl(Canary Value)

!expl(benefit known randomness) -> [initialization vectors (IV), salt, nonce]
!expl(lack of authentication of client) -> SSL/TLS webpage
!desc(two security differences) -> [LM,NTLM]
!desc(ss-property, *-property, ds-property) -> Bell-LaPadula
!desc(canary value) -> detecting a buffer overflow attack
!desc(buffer overflow prevention)
!diff(tunnle vs transport)-mode ->  IPsec
!expl(IPsec protects, replay attacks)
!diff(anomaly, missuse)-detection -> IDS
!diff(Orang book vs ITSEC vs Common Creteria) -> [functionality, assurance]
!expl(WEP,CRC-32,ICV,RC4) -> integrity protection
!expl(attacker chosen challenge) -> [[TMTO,MITM]-attack],HMAC]
!expl(known challenge not sufficient) -> TMTO-attack
!expl(challenge,HMAC,random number addition) -> change in protocol security
!expl(startpoint,endpoint,function) -> [TMTO, rainbow]-tables
!desc(largest password can be broken, online attack) -> [T=2^24,M=2^24]
!expl(PBKDF2()) -> improved security of protocol
!expl([primage,second preimage, collision]-resistance]) -> n-bit hash function
!desc(inputs <-> collision) -> n-bit hash function
!desc(inputs <-> second preimage) -> n-bit hash function
!expl(ruid) -> process executes rwsrwxrwx alice:root prog
!expl(euid) -> process executes rwsrwxrwx alice:root prog
!expl(delete permissions) -> -rwsrwzrwx alice:root prog
!expl(listing of new non-exec file) -> umask 027
!expl(x) -> -rwsrwxrwx
!desc(Reference monitor)
!desc(Clark-Wilson)
!desc(CBS mode)
!desc(Security descriptor)
!desc(inode)

#--- Slides ----

#--- Lecture #1 ---

!diff(ITSEC vs Clark and Wilson vs Oragne Book) -> Integrity
!answ(ITSEC: prevent unauthorized writing,
      Clark and Wilson: never possible to destroy/corrupt co. assets or data,
      Organge book: Statebased\, exists when data == source and never exposed to alteration or destruction)

!desc(Integrity) -> communications
!answ(dete. and corr. inte. or rand. mod. in trans.)

!desc(Integrity) -> general case
!answ(ever. should be as it is supp. to be.)

!desc(four ways to achi. integerity)
!answ(CRCs, hash funcs., Mess. Auth. Codes, digi. sigs.)

!expl(Accountability) -> Orange Book
!answ(aduit, possible to trace security actions to responsible party)

!expl(Nonrepudiation of-[ origin, receipt])
!answ(Origin: can't deny sending information,
      Reciept: can't deny receiving information)


#--- Lecture #2 - #3 (13*4 = 52 slides) ---
#layout:
#  * Cryptography
#    * Keys
#      - symmetric
#      - public
#      * security
#        - RSA
#    * Primitives
#    * Encryption strength
#    * Plain- and cipher-text
#    * Ciphers
#      - Vigenere
#      - substitution
#      - one-time-pad
#      - stream
#      - block
#    * Hash functions
#    * Message Authentication Codes (MAC)
#      - properties
#    * Signatures
#    * Certificates

!expl([Empirically,Provably,Unconditionally]-secure -> Encryption mechanics strength.
!answ(Empirically: No one has broken it for some time,
      Provably: Breaking at least as hard as other common problem,
      Unconditionally: Secure with unlimited data-power)

!desc([Plain,Cipher]-text)
!answ(Plain: the text that user wants to send,
      Cipher: the actual text that gets sent)

!expl(Stream cipher)
!answ(Short random key is expanded to long (pseudo)random bit sequence)

!expl(Block cipher)
!answ(Substitution with larger tables\, map text- to cipher-symbols with math)

!diff(ECB vs CBC) -> cipher encryption.
!answ(Electronic Code Book: each block encrypted in isolation\, redundancy,
      Cipher Block Chaining: previous block input to current\, redundancy gone)

!expl(Public key- or asymmetric-cryptography) -> encryption and decryption
!answ(2x keys\, public=encrypt\, private=decrypt)

!expl(Public key- or asymmetric-cryptography) -> digital signatures
!answ(2x keys\, public=verification\, private=signing)

!desc(Defining properties of a hash funciton)
!answ(Easy to compute\, compression arbitrary to fixed length)

!desc(Preimage resistance / one-way) -> Hash function
!answ(infeasible to reconstruct x from y h(x)=y)

!desc(Second preimage resistance / weak collision resistance) -> Hash function
!answ(given x and h(x)\, infeasible to find x' such that h(x)=h(x'))

!desc(Collision resistance / strong collision resistance) -> Hash function
!answ(infeasible to find x, x' such that h(x)=h(x'))

!desc(keyed hash function) -> MAC
!answ(Computed from message and key)

!desc(Purpose of MAC?)
!answ(Proves integrity of message)

!expl(Ease of computation,Compression,Computation resistance) -> MAC properties
!answ(Ease of computation: given k and x, h_k(x) easy to compute,
      Compression: arbitrary input length to fixed output length,
      Computation resistance: given pairs x_p, h_k(x_i) infeasible to compute
                              pair (x, h_k(x)) with new message x)

!expl(nonrepudiation)
!answ(An action should be tied to a unique individual)

!desc(Public verification key) -> RSA signatures
!answ(n,d)

!desc(Private signing key) -> RSA signatures
!answ(e,p,q)

!desc(Signing) -> RSA signatures
!answ(Hash message M: m=h(M) and sign y s= m^e mod n)

!desc(Verification given s and m) -> RSA signatures
!answ(check if s^d = m mod n)

!diff([symmetric vs asymmetric]-algorithms) -> speed
!answ(symmetric are ~ x1000 faster)

!diff([symmetric vs asymmetric]-algorithms) -> security
!answ(Asymmetric key of 1024 ~= 80 symmetric)

!diff(MAC vs digital signaturs) -> keys
!answ(MAC: secret key can sign and verify,
      Signature: One can sign all can verify)

!expl(MAC, Digital Signatures) -> prerequisites for usage
!answ(MAC: pre-shared key,
      Digital Signatures: digital certificates)

